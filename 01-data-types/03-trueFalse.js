// Exerc√≠cio 3: Compara√ß√£o de Tipos de Dados

// Crie uma fun√ß√£o chamada compareTypes que recebe dois valores e retorna true se ambos forem do mesmo tipo e false caso contr√°rio.

function compareTypes(value1, value2) { 
 return typeof value1 === typeof value2

}

console.log(compareTypes(42, 'hello'))
console.log(compareTypes(42, 23))
console.log(compareTypes('hello', 'world'))
console.log(compareTypes(true, false))
console.log(compareTypes({}, [])) //()




//Output:

// false                                                
// true
// true
// true
// true

//Por que um array √© um objeto em JavaScript?
// S √© uma linguagem baseada em prot√≥tipos, portanto existem apenas tipos e objetos primitivos. Concede flexibilidade, mas ao mesmo tempo torna as coisas mais confusas.

// üëâTudo √© um objeto!
// A implementa√ß√£o de todos os valores n√£o primitivos em JavaScript √© baseada em objetos.
// Simplificando, JavaScript possui um √∫nico objeto protot√≠pico do qual todos os outros objetos obt√™m suas propriedades iniciais. Podemos obt√™-lo acessando __proto__.

// O tipo array n√£o √© uma exce√ß√£o aqui. A classe global Array √© um objeto global e um literal de array √© apenas uma inst√¢ncia da classe global Array.
// Por sua vez, um prot√≥tipo direto do tipo array cont√©m todos os seus m√©todos especiais, como fill, find, etc.